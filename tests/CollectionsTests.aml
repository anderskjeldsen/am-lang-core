namespace Tests {

    class CollectionsTests {
        import Am.Lang
        import Am.Collections
        import Am.Tests
        
        // List Tests
        test listAddAndGet() {
            var list = List.newList<Int>()
            list.add(1)
            list.add(2)
            list.add(3)
            
            Assert.assertEquals(3, list.getSize())
            Assert.assertEquals(1, list.get(0))
            Assert.assertEquals(2, list.get(1))
            Assert.assertEquals(3, list.get(2))
        }
        
        test listRemove() {
            var list = List.newList<Int>()
            list.add(1)
            list.add(2)
            list.add(3)
            
            list.remove(2)
            
            Assert.assertEquals(2, list.getSize())
            Assert.assertEquals(1, list.get(0))
            Assert.assertEquals(3, list.get(1))
        }
        
        test listContains() {
            var list = List.newList<Int>()
            list.add(1)
            list.add(2)
            list.add(3)
            
            Assert.assertTrue(list.contains(2))
            Assert.assertFalse(list.contains(5))
        }
        
        test listIsEmpty() {
            var list = List.newList<Int>()
            
            Assert.assertTrue(list.isEmpty())
            list.add(1)
            Assert.assertFalse(list.isEmpty())
        }
        
        test listClear() {
            var list = List.newList<Int>()
            list.add(1)
            list.add(2)
            list.add(3)
            
            list.clear()
            
            Assert.assertEquals(0, list.getSize())
            Assert.assertTrue(list.isEmpty())
        }
        
        // HashMap Tests
        test hashMapSetAndGet() {
            var map = new HashMap<String, String>()
            map.set("key1", "value1")
            map.set("key2", "value2")
            
            Assert.assertEquals(2, map.getSize())
            Assert.assertEquals("value1", map.get("key1"))
            Assert.assertEquals("value2", map.get("key2"))
        }
        
        test hashMapContainsKey() {
            var map = new HashMap<String, String>()
            map.set("key1", "value1")
            
            Assert.assertTrue(map.containsKey("key1"))
            Assert.assertFalse(map.containsKey("key2"))
        }
        
        test hashMapContainsValue() {
            var map = new HashMap<String, String>()
            map.set("key1", "value1")
            
            Assert.assertTrue(map.containsValue("value1"))
            Assert.assertFalse(map.containsValue("value2"))
        }
        
        test hashMapRemove() {
            var map = new HashMap<String, String>()
            map.set("key1", "value1")
            map.set("key2", "value2")
            
            var removed = map.remove("key1")
            
            Assert.assertEquals("value1", removed)
            Assert.assertEquals(1, map.getSize())
            Assert.assertFalse(map.containsKey("key1"))
        }
        
        test hashMapClear() {
            var map = new HashMap<String, String>()
            map.set("key1", "value1")
            map.set("key2", "value2")
            
            map.clear()
            
            Assert.assertEquals(0, map.getSize())
            Assert.assertTrue(map.isEmpty())
        }
        
        // HashSet Tests
        test hashSetAddAndHas() {
            var set = new HashSet<Int>()
            set.add(1)
            set.add(2)
            set.add(3)
            
            Assert.assertTrue(set.has(1))
            Assert.assertTrue(set.has(2))
            Assert.assertTrue(set.has(3))
            Assert.assertFalse(set.has(4))
        }
        
        test hashSetNoDuplicates() {
            var set = new HashSet<Int>()
            set.add(1)
            set.add(2)
            set.add(2)  // Duplicate
            set.add(3)
            
            Assert.assertEquals(3, set.getSize())
        }
        
        // TreeSet Tests
        test treeSetAddAndHas() {
            var treeSet = new TreeSet<Int>((a, b) => {
                if (a < b) {
                    return -1
                } else if (a > b) {
                    return 1
                } else {
                    return 0
                }
            })
            
            treeSet.add(5)
            treeSet.add(2)
            treeSet.add(8)
            
            Assert.assertTrue(treeSet.has(5))
            Assert.assertTrue(treeSet.has(2))
            Assert.assertTrue(treeSet.has(8))
            Assert.assertFalse(treeSet.has(10))
        }
        
        test treeSetSorting() {
            var treeSet = new TreeSet<Int>((a, b) => {
                if (a < b) {
                    return -1
                } else if (a > b) {
                    return 1
                } else {
                    return 0
                }
            })
            
            treeSet.add(5)
            treeSet.add(2)
            treeSet.add(8)
            treeSet.add(1)
            treeSet.add(9)
            
            var sortedList = treeSet.toList()
            
            Assert.assertEquals(1, sortedList.get(0))
            Assert.assertEquals(2, sortedList.get(1))
            Assert.assertEquals(5, sortedList.get(2))
            Assert.assertEquals(8, sortedList.get(3))
            Assert.assertEquals(9, sortedList.get(4))
        }
        
        test treeSetNoDuplicates() {
            var treeSet = new TreeSet<Int>((a, b) => {
                if (a < b) {
                    return -1
                } else if (a > b) {
                    return 1
                } else {
                    return 0
                }
            })
            
            treeSet.add(5)
            treeSet.add(2)
            treeSet.add(2)  // Duplicate
            treeSet.add(8)
            
            Assert.assertEquals(3, treeSet.getSize())
        }
        
        test treeSetRemove() {
            var treeSet = new TreeSet<Int>((a, b) => {
                if (a < b) {
                    return -1
                } else if (a > b) {
                    return 1
                } else {
                    return 0
                }
            })
            
            treeSet.add(10)
            treeSet.add(5)
            treeSet.add(15)
            
            treeSet.remove(5)
            
            Assert.assertEquals(2, treeSet.getSize())
            Assert.assertFalse(treeSet.has(5))
            Assert.assertTrue(treeSet.has(10))
            Assert.assertTrue(treeSet.has(15))
        }
        
        test treeSetReverseOrder() {
            var reverseTreeSet = new TreeSet<Int>((a, b) => {
                if (a > b) {
                    return -1
                } else if (a < b) {
                    return 1
                } else {
                    return 0
                }
            })
            
            reverseTreeSet.add(5)
            reverseTreeSet.add(2)
            reverseTreeSet.add(8)
            reverseTreeSet.add(1)
            reverseTreeSet.add(9)
            reverseTreeSet.add(3)
            
            var reverseSortedList = reverseTreeSet.toList()
            
            Assert.assertEquals(9, reverseSortedList.get(0))
            Assert.assertEquals(8, reverseSortedList.get(1))
            Assert.assertEquals(5, reverseSortedList.get(2))
            Assert.assertEquals(3, reverseSortedList.get(3))
            Assert.assertEquals(2, reverseSortedList.get(4))
            Assert.assertEquals(1, reverseSortedList.get(5))
        }
        
        test treeSetWithStrings() {
            var stringTreeSet = new TreeSet<String>((a, b) => {
                // Basic string comparison - compare character by character
                var lenA = a.getLength()
                var lenB = b.getLength()
                var minLen = lenA
                if (lenB < lenA) {
                    minLen = lenB
                }

                for (i = 0 to minLen) {
                    var charA = a.characterAt(i.toUInt())
                    var charB = b.characterAt(i.toUInt())
                    if (charA < charB) {
                        return 1  // Reverse order: return positive if a < b
                    } else if (charA > charB) {
                        return -1  // Reverse order: return negative if a > b
                    }
                }
                
                // If all compared characters are equal, compare lengths (reverse order)
                if (lenA < lenB) {
                    return 1
                } else if (lenA > lenB) {
                    return -1
                } else {
                    return 0
                }
            })
            
            stringTreeSet.add("apple")
            stringTreeSet.add("banana")
            stringTreeSet.add("cherry")
            stringTreeSet.add("date")
            stringTreeSet.add("apple")  // Duplicate - should not be added
            
            Assert.assertEquals(4, stringTreeSet.getSize())
            
            var sortedStrings = stringTreeSet.toList()
            Assert.assertEquals("date", sortedStrings.get(0))
            Assert.assertEquals("cherry", sortedStrings.get(1))
            Assert.assertEquals("banana", sortedStrings.get(2))
            Assert.assertEquals("apple", sortedStrings.get(3))
        }
    }
}
