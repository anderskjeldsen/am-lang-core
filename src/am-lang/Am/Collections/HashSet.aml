namespace Am.Collections {

    @Am.Lang.Annotations.UseMemoryPool
    class HashSetEntry<T>(var value: T) {        
        var next: HashSetEntry<T>
    }

    class HashSet<T>: Set<T> {
        import Am.Lang

        private var size: Int
        private var bucket: HashSetEntry<T>[]

        fun getSize(): Int {
            return this.size
        }

        fun has(value: T): Bool {
            "has value".println()
            if (this.bucket == null) {
                return false
            }
            var hash = value.hash()
            var index = hash % this.bucket.length()
            var entry = this.bucket[index]
            var x = this.findEntry(entry, value)
//            ObjectHelper.printDebug(x)
            if (x != null) {
                return true
            }
            return false

        }

        private fun findEntry(entry: HashSetEntry<T>, value: T): HashSetEntry<T> {
            while(entry != null) {
                if (entry.value == value) {
//                    ObjectHelper.printDebug(entry)
                    return entry
                }
                entry = entry.next
            }
            return null
        }

        fun add(value: T) {
            if (this.bucket == null) {
                this.bucket = new HashSetEntry<T>[20]
            }

            if (this.size * 2 > (this.bucket.length())) {
                var oldBucket = this.bucket
                this.bucket = new HashSetEntry<T>[this.bucket.length() * 10UI]
                ("create new bucket in HashSet: " + this.bucket.length().toString()).println()
//                this.size = 0
//                "load new bucket in HashSet".println()

                var i = 0
                var n: HashSetEntry<T> = null
                while(i < oldBucket.length()) {
                    var entry = oldBucket[i]
                    while (entry != null) {    
                        var next = entry.next
                        entry.next = n
                        this.privateSetEntry(entry)
                        entry = next
                    }
                    i++
                }       
//                "loaded new list in hashmap".println()         
            }

            this.privateSet(value)
        }

        private fun privateSetEntry(entry: HashSetEntry<T>) {
            var hash = entry.value.hash()
            var index = hash % this.bucket.length()
//            ("value: " + entry.value.toString() + ", hash: " + hash.toString() + ", index: " + index.toString()).println()

            var bEntry = this.bucket[index]
            if (bEntry == null) {
                this.bucket[index] = entry
//                this.size++
            } 
            else {                
                this.bucket[index] = entry
                entry.next = bEntry
//                this.size++
            }
        }

        private fun privateSet(value: T) {
            var hash = value.hash()
            var index = hash % this.bucket.length()
//            ("value: " + value.toString() + ", hash: " + hash.toString() + ", index: " + index.toString()).println()

            var entry = this.bucket[index]
            if (entry == null) {
                entry = new HashSetEntry<T>(value)
                this.bucket[index] = entry
                this.size++
            } 
            else {
//            if (entry != null) {
                var found = false
                var previous = entry
                while((entry != null) && (found == false)) {
                    previous = entry
//                    ("compare " + value.toString() + " vs " + entry.value.toString()).println()
                    if (value == entry.value) {
//                        ("found " + value.toString()).println()
                        found = true
                    }
                    entry = entry.next
                }
                if (!found) {
//                    ("add " + value.toString()).println()
                    previous.next = new HashSetEntry<T>(value)
                    this.size++
                }
            }

        }
    }
}