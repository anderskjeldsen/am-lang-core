namespace Am.Collections {

    class HashMapEntry<K, V>(var key: K, var value: V): MapEntry<K, V> {
        var next: HashMapEntry<K, V>
        fun getKey(): K {
            return this.key
        }
        fun getValue(): V {
            return this.value
        }
    }

    class HashMap<K, V>: Map<K, V> {
        import Am.Lang

        private var size: Int
        private var bucket: HashMapEntry<K, V>[]

        static fun createWithInitialSize<K, V>(initialSize: Int): HashMap<K, V> {
            var map = new HashMap<K, V>()
            map.size = size
            map.bucket = new HashMapEntry<K, V>[initialSize]
        }

        fun getSize(): Int {
            return this.size
        }

        fun get(key: K): V {
            if (this.bucket == null) {
                return null
            }
            var hash = key.hash()
            var index = hash % this.bucket.length()

            var entry = this.bucket[index]
            var res = this.findEntry(entry, key)
            if (res != null) {
                return res.value
            }
            return null
        }

        private fun findEntry(entry: HashMapEntry<K, V>, key: K): HashMapEntry<K, V> {
            while(entry != null) {
                if (entry.key == key) {
                    return entry
                }
                entry = entry.next
            }
            return null
        }

        fun set(key: K, value: V) {
            if (this.bucket == null) {
                this.bucket = new HashMapEntry<K, V>[20]
            }

            if (this.size > (this.bucket.length())) {
                var oldBucket = this.bucket
                this.bucket = new HashMapEntry<K, V>[this.bucket.length() * 10UI]
                ("create new bucket in HashMap: " + this.bucket.length().toString()).println()

                var i = 0
                var n: HashMapEntry<K, V> = null
                while(i < oldBucket.length()) {
                    var entry = oldBucket[i]
                    while (entry != null) {    
                        var next = entry.next
                        entry.next = n
                        this.privateSetEntry(entry)
                        entry = next
                    }
                    i++
                }       
            }

            this.privateSet(key, value)
        }

        private fun privateSetEntry(entry: HashMapEntry<K, V>) {
            var hash = entry.key.hash()
            var index = hash % this.bucket.length()

            var bEntry = this.bucket[index]
            if (bEntry == null) {
                this.bucket[index] = entry
            } 
            else {                
                this.bucket[index] = entry
                entry.next = bEntry
            }
        }

        private fun privateSet(key: K, value: V) {
            var hash = key.hash()
            var index = hash % this.bucket.length()

            var entry = this.bucket[index]
            if (entry == null) {
                entry = new HashMapEntry<K, V>(key, value)
                this.bucket[index] = entry
                this.size++
            } 
            else {
                var found = false
                var previous = entry
                while((entry != null) && (found == false)) {
                    previous = entry
                    if (key == entry.key) {
                        found = true
                    }
                    entry = entry.next
                }
                if (!found) {
                    previous.next = new HashMapEntry<K, V>(key, value)
                    this.size++
                }
            }

        }
    }
}