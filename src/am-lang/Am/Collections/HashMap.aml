namespace Am.Collections {

    class HashItems<T, U> {
        var items: List<MapEntry<T, U>> = List<MapEntry<T, U>>.newList<MapEntry<T, U>>()
    }

    class HashMap<T, U>: Map<T, U> {
        import Am.Lang

        private var size: Int
        private var hashItemsArray: HashItems<T, U>[]

        fun getSize(): Int {
            return this.size
        }

        fun get(key: T): U {
            ("get Key " + key.toString()).println()
            var hash = key.hash()
            var index = hash % this.hashItemsArray.length()
            var hashItems = this.hashItemsArray[index]
            if (hashItems == null) {
                throw new Exception("Key not found " + key.toString())
            }
            var found = false
            each(hashItems.items, i) {
                if (!found) {
                    var entryHash = i.key.hash()
                    if (entryHash == hash) {
                        return i.value
                    }
                }
            }
            throw new Exception("Key not found " + key.toString())
            return null
        }

        fun set(key: T, value2: U) {
            ("set Key " + key.toString()).println()

            if (this.hashItemsArray == null) {
                this.hashItemsArray = new HashItems<T, U>[20]
            }
            if (this.size > (this.hashItemsArray.length() * 5)) {
                var oldItems = this.hashItemsArray
                this.hashItemsArray = new HashItems<T, U>[this.hashItemsArray.length() * 5]

                var i = 0
                while(i < oldItems.length()) {
                    var hashItems = oldItems[i]
                    each(hashItems.items, hi) {
                        this.privateSet(hi.key, hi.value)
                    }
                    i++
                }                
                // create new array and re-add items
            }
            this.privateSet(key, value2)
        }

        private fun privateSet(key: T, value2: U) {
            var hash = key.hash()
            var index = hash % this.hashItemsArray.length()
            ("index " + index.toString()).println()
            var hashItems = this.hashItemsArray[index]
            if (hashItems == null) {
                "Create HashItems".println()
                hashItems = new HashItems<T, U>()
                this.hashItemsArray[index] = hashItems
            }
            var found = false
            each(hashItems.items, i) {
                if (!found) {
                    var entryHash = i.key.hash()
                    if (entryHash == hash) {

                        if (i.key == key) {
                            i.value = value2
                        }
                        found = true
                        // TODO: break
                    }
                }
            }
            if (!found) {
                hashItems.items.add(new MapEntry<T, U>(key, value2))
            }
        }
    }
}