namespace Am.Collections {
    import Am.Lang

    // A utility class to create comparators from lambda-style functions
    abstract class LambdaComparator<T>: Comparator<T> {
        abstract fun compareElements(a: T, b: T): Int
        
        override fun compare(a: T, b: T): Int {
            return this.compareElements(a, b)
        }
    }
    
    // Utility class for common comparators
    class Comparators {
        // Create a natural order comparator for integers
        static fun naturalIntComparator(): Comparator<Int> {
            return new NaturalIntComparator()
        }
        
        // Create a reverse order comparator for integers
        static fun reverseIntComparator(): Comparator<Int> {
            return new ReverseIntComparator()
        }
    }
    
    // Natural order integer comparator
    class NaturalIntComparator: Comparator<Int> {
        import Am.Lang
        
        override fun compare(a: Int, b: Int): Int {
            if (a < b) {
                return -1
            } else if (a > b) {
                return 1
            } else {
                return 0
            }
        }
    }
    
    // Reverse order integer comparator
    class ReverseIntComparator: Comparator<Int> {
        import Am.Lang
        
        override fun compare(a: Int, b: Int): Int {
            if (a > b) {
                return -1
            } else if (a < b) {
                return 1
            } else {
                return 0
            }
        }
    }
}