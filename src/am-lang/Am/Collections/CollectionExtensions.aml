namespace Am.Collections {

    class CollectionExtensions {
        import Am.Lang

// predicate must be able to get the type of T from the function signature
        ext fun filter<T>(collection: Iterable<T>, predicate: (t: T) => Bool): Iterable<T> {
            var result = List<T>.newList<T>()
            each(collection, item) {
                if (predicate(item)) {
                    result.add(item)
                }
            }
            return result as Iterable<T>
        }

        ext fun firstOr<T>(iterable: Iterable<T>, or: T): T {
            each(iterable, item) {
                return item
            }
            return or
        }

    }
}