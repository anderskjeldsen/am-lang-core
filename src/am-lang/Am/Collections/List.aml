namespace Am.Collections {

    class List<T> {
        import Am.Lang
        import Am.IO

        private var size: Int = 0
        var capacity: Int = 0
        private var items: T[]

        static fun newList<T>(): List<T> {
            var l: List<T> = new List<T>()
            l.capacity = 2
            l.items = new T[l.capacity]
            return l
        }

        static fun main2() {
            try {
                var s = new Stream()
                "line1".println()
                var is = s as IStream
                "line2".println()
                var b = is.readByte()
                "line3".println()
                b.toString().println()
                "line4".println()


            } catch(e: Exception) {
                e.message.println()
                throw new Exception("hello2")
            } finally {
                "finally".println()
            }
        }

        fun add(item: T) {
//            if (item !=  null) {
                if (this.size >= this.capacity) {
                    var newCapacity = this.capacity * 150
                    newCapacity = newCapacity / 100
                    var newItems = new T[newCapacity]
                    var x = 0
                    while(x < this.size) {
                        newItems[x] = this.items[x]                    
                        x++
                    }
                    this.capacity = newCapacity
                    this.items = newItems
                }
                if (this.size < this.capacity ) {
                    this.items[this.size] = item
                    this.size++
                }
//            }
        }

        fun remove(item: T) {
//            if (item != null) {
                var i = 0
                while(i < this.size) {
                    var x = this.items[i]
                    if (x == item) {
                        while(i < this.size) {
                            this.items[i] = this.items[i + 1]
                            i++
                        }
                        this.size--
                    }
                    i++
                }
//            }
        }

        fun get(index: Int): T {
            if (index < 0 || index > this.size) {
                throw new Exception("Index out of bounds: " + index.toString())                
            }
            return this.items[index]
        }

        fun toArray(): T[] {
            var arr = new T[this.size]
            var i = 0
            while(i < this.size) {
                arr[i] = this.get(i)
                i++
            }
            return arr
        }
    }
}