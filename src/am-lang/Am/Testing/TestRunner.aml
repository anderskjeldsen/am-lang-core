namespace Am.Testing {
    
    class TestRunner {
        import Am.Lang
        
        private var testsPassed: Int = 0
        private var testsFailed: Int = 0
        private var currentTestName: String = ""
        
        fun test(name: String, testFunc: () => Bool) {
            this.currentTestName = name
            try {
                var result = testFunc()
                if (result) {
                    this.testsPassed++
                    ("✓ PASS: " + name).println()
                } else {
                    this.testsFailed++
                    ("✗ FAIL: " + name).println()
                }
            } catch(e: Exception) {
                this.testsFailed++
                ("✗ FAIL: " + name + " - Exception: " + e.getMessage()).println()
            }
        }
        
        fun printSummary() {
            "".println()
            ("===================================").println()
            ("Test Summary:").println()
            ("  Passed: " + this.testsPassed.toString()).println()
            ("  Failed: " + this.testsFailed.toString()).println()
            ("  Total:  " + (this.testsPassed + this.testsFailed).toString()).println()
            ("===================================").println()
        }
        
        fun assert(condition: Bool, message: String): Bool {
            if (!condition) {
                ("  Assertion failed: " + message).println()
            }
            return condition
        }
        
        fun assertEquals<T>(expected: T, actual: T, message: String): Bool {
            var result = expected == actual
            if (!result) {
                ("  Expected: " + expected.toString() + ", but got: " + actual.toString() + " - " + message).println()
            }
            return result
        }
        
        fun assertTrue(condition: Bool, message: String): Bool {
            return this.assert(condition, message)
        }
        
        fun assertFalse(condition: Bool, message: String): Bool {
            return this.assert(!condition, message)
        }
    }
}
