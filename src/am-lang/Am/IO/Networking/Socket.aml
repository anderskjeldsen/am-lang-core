
namespace Am.IO.Networking
{
    enum SocketType {
        import Am.Lang

        stream = 1
        dgram = 2
        raw = 3
        rdm = 4
        seqPacket = 5
    }

    enum AddressFamily {
        import Am.Lang

        unspecified = 0
        unix = 1
        local = 1
        inet = 2
        inet6 = 10     
    }   

    enum ProtocolFamily {        
        import Am.Lang
        none = 0
    }

    native class Socket
    {
        import Am.Lang

        private var addressFamily: AddressFamily
        private var socketType: SocketType
        private var protocolFamily: ProtocolFamily

        static fun create(addressFamily: AddressFamily, socketType: SocketType, protocolFamily: ProtocolFamily): Socket {
            var socket = new Socket()
            socket.addressFamily = addressFamily
            socket.socketType = socketType
            socket.protocolFamily = protocolFamily

            return socket
        }

        private native fun createSocket(addressFamily: AddressFamily, socketType: SocketType, protocolFamily: ProtocolFamily)


    }
}

/*

GSocket::GSocket(const GAddressFamily &AddressFamily, const GSocketType &SocketType, const GProtocolType &ProtocolType) : Socket(-1), Key(-1)
{ 
	Init(AddressFamily, SocketType, ProtocolType
}

void GSocket::Init(const GAddressFamily &AddressFamily, const GSocketType &SocketType, const GProtocolType &ProtocolType)
{
	if ( !WSAver ) 
	{ 
		WSAver = MAKEWORD(2, 2 
		WSAStartup(WSAver, &WSAdata 
		Sockets++;
	}

	Socket = socket(AddressFamily.Value, SocketType.Value, ProtocolType.Value 
	if ( Socket < 0 )
	{
		throw GException("Could not create socket"
	}
}
*/