
namespace Am.IO.Networking
{
    enum SocketType {
        import Am.Lang

        stream = 1
        dgram = 2
        raw = 3
        rdm = 4
        seqPacket = 5
    }

    enum AddressFamily {
        import Am.Lang

        unspecified = 0
        unix = 1
        local = 1
        inet = 2
        inet6 = 10     
    }   

    enum ProtocolFamily {        
        import Am.Lang
        unspecified = 0
    }

    native class Socket
    {
        import Am.Lang

        private var addressFamily: AddressFamily
        private var socketType: SocketType
        private var protocolFamily: ProtocolFamily

        static fun create(addressFamily: AddressFamily, socketType: SocketType, protocolFamily: ProtocolFamily): Socket {
            var socket = new Socket()
            socket.addressFamily = addressFamily
            socket.socketType = socketType
            socket.protocolFamily = protocolFamily

            socket.createSocket(addressFamily, socketType, protocolFamily)

            return socket
        }

        private native fun createSocket(addressFamily: AddressFamily, socketType: SocketType, protocolFamily: ProtocolFamily)

        fun connect(hostName: String, port: Int) {
            this.connectNative(hostName, port, this.addressFamily)
        }

        private native fun connectNative(hostName: String, port: Int, addressFamily: AddressFamily)

        native fun send(bytes: UByte[], length: UInt): UInt
        native fun receive(bytes: UByte[], length: UInt): UInt

        native fun close()
    }


    class SocketStream(private var socket: Socket) : Stream
    {
        import Am.Lang
        import Am.IO

        fun read(buffer: UByte[], offset: Long, length: UInt): UInt {
            return this.socket.receive(buffer, length)
        }

        fun write(buffer: UByte[], offset: Long, length: UInt) {
            this.socket.send(buffer, length)
        }

        fun seekFromStart(offset: Long) {
            throw new Exception("Not supported")            
        }

        fun readByte(): Int {
            throw new Exception("Not supported")
            return 0 // TODO: fix
        }

        fun writeByte(byte: Int) {
            throw new Exception("Not supported")
        }
    }    
}

