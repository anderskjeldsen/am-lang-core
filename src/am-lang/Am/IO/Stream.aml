/*
TODO: Make it as an interface

        fun print(text: String, printer: (String) => String) {
            printer(text)
        }

            var s = new Stream()
            var is = s as IStream
            is.readByte()

        fun test2() {
            this.test((s) => {
                
            })            
        }
*/
namespace Am.IO
{
    /*
    class StreamTest {
        import Am.Lang

        fun test(func: (s2: String) => String) {
            func("hello")
        }

        fun test2() {
            var t = "world"
            this.test((s) => {
                return s + " " + t
            })
        }


    }
    */

/*
    class Stream() : IStream
    {
        import Am.Lang

        fun read(buffer: Byte[], offset: Long, length: Long) {

        }

        fun write(buffer: Byte[], offset: Long, length: Long) {
            
        }

        fun seekFromStart(offset: Long) {
            
        }

        fun readByte(): Int {
            return 0
        }

        fun writeByte(byte: Int) {
            
        }
    }
    */

    interface Stream
    {
        import Am.Lang

        fun read(buffer: UByte[], offset: Long, length: UInt): UInt
        fun write(buffer: UByte[], offset: Long, length: UInt)
        fun seekFromStart(offset: Long)
        fun readByte(): Int
        fun writeByte(byte: Int)
    }
}
