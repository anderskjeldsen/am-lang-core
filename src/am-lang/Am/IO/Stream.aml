/*
TODO: Make it as an interface

        fun print(text: String, printer: (String) => String) {
            printer(text)
        }

*/
namespace Am.IO
{
    class StreamTest {
        import Am.Lang

        fun test(func: (String) => String) {
            var s = new Stream()
            var is = s as IStream
            is.readByte()
        }
    }

    class Stream() : IStream
    {
        import Am.Lang

        fun read(buffer: Byte[], offset: Long, length: Long) {

        }

        fun write(buffer: Byte[], offset: Long, length: Long) {
            
        }

        fun seekFromStart(offset: Long) {
            
        }

        fun readByte(): Int {
            return 0
        }

        fun writeByte(byte: Int) {
            
        }

    }

    interface IStream
    {
        import Am.Lang

        fun read(buffer: Byte[], offset: Long, length: Long)
        fun write(buffer: Byte[], offset: Long, length: Long)
        fun seekFromStart(offset: Long)
        fun readByte(): Int
        fun writeByte(byte: Int)
    }
}
