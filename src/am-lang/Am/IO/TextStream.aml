
namespace Am.IO
{
    class TextStream(private var stream: Stream) : Stream
    {
        import Am.Lang
        import Am.Collections

        private var buffer: UByte[] = new UByte[1024]        

        fun read(buffer: UByte[], offset: Long, length: UInt): UInt {
            return this.stream.read(buffer, offset, length)
        }

        fun write(buffer: UByte[], offset: Long, length: UInt) {
            this.stream.write(buffer, offset, length)
        }

        fun seekFromStart(offset: Long) {
            this.stream.seekFromStart(offset)
        }

        fun readByte(): Int {
            return this.stream.readByte()
        }

        fun writeByte(byte: Int) {
            this.stream.writeByte(byte)
        }


        fun readString(): String {
            var read = this.read(this.buffer, 0L, this.buffer.length().toUInt())
            var list = List<UByte>.newList<UByte>()

            while(read > 0UI) {
  //              ("We read " + read.toString() + " bytes").println()
                var subArray = new UByte[read]
                var i = 0UI
                while(i < read) {
                    subArray[i] = this.buffer[i]
                    i++
                }

//                var subArray = this.buffer.subArray(0L, read.toLong())
//                            "step 3a".println()
                list.addArray(subArray)
//                "step 3b".println()

                var exp = read == this.buffer.length().toUInt()
                if (exp) {
                    read = this.read(this.buffer, 0L, this.buffer.length().toUInt())
                } 
                if (!exp) {
                    read = 0UI
                }
            }

            var array = list.toArray()

            return String.fromBytes(array, "UTF-8")
        }

        fun writeString(string: String) {
            var bytes = string.toBytes("UTF-8")
            this.write(bytes, 0L, bytes.length().toUInt())
        }

        // TODO: implement properly, now it doesn't work.
        fun readLine(): String {
            var read = this.read(this.buffer, 0L, this.buffer.length().toUInt())
            var list = List<UByte>.newList<UByte>()

            while(read > 0UI) {
                var subArray = new UByte[read]
                var i = 0UI
                while(i < read) {
                    subArray[i] = this.buffer[i]
                    i++
                }

                list.addArray(subArray)
                "step 3b".println()
            }

            var array = list.toArray()

            return String.fromBytes(array, "UTF-8")
        }

/*
        native fun readString(): String
        native fun writeString(string: String)
        */
    }
}
