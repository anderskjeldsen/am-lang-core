namespace Am.Examples {    

    class TRun : Runnable {
        import Am.Lang
        override fun run() {
            "hello world".println()
        }
    }

    class CoreStartup {
        import Am.Lang
        import Am.Lang.Diagnostics
        import Am.IO
        import Am.Collections
        import Am.Util.Parsers.Json
        import Am.Util.Parsers.Text
        import Am.Threading

        static var boolValue: Bool = true

        static var strValue: String = "hello"

        static fun main30() {
            var x = 1
            switch(x) {
                case 1:
                    "x is 1".println()
                case 2:
                    "x is 2".println()
                default:
                    "x is something else".println()
            } 
            var y = "hello"
            switch(y) {
                case "world":
                    "y is world".println()
                case "5":
                    "y is 5".println()
                case "hello":
                    "y is hello".println()
                default:
                    "y is something else".println()
            }
        }

        static fun main29(args: String[]) {
            for(i = 0 to args.length()) {
                var s = args[i]
                ("String $i = $s").println()
            }
        }

        // main27
        static fun main27() {
// For loop with continue
            for (i = 0 to 10) {
                if (i == 5) {
                    continue  // Skip when i equals 5
                }
                i.toString().println()
            }

            // While loop with continue  
            var j = 0
            while (j < 10) {
                j++
                if (j % 2 == 0) {
                    continue  // Skip even numbers
                }
                j.toString().println()
            }

            // Each loop with continue
            var myArray = List.newList<Int>()
            myArray.add(1)
            myArray.add(-2)
            myArray.add(3)
            myArray.add(-4)
            myArray.add(5)
            each(myArray, item) {
                if (item < 0) {
                    continue  // Skip negative values
                }
                item.toString().println()
            }        
        }

        // main26
        static fun main26() {
            "init array".println()
            var myArray: Int[] = [1, 2, 3, 4, 5]
            "as iterable".println()
            var ac = myArray.asIterable()
            "each...".println()
            each(ac, item) {
                item.toString().println()
            }
            "done".println()
        }

        // main25
        static fun main25() {            
            CoreStartup.strValue.println()
        }

        // main24
        static fun main24() {
            var x = 5
            var b = 10
            var s = "x = $x, b = ${b}"
            s.println()
        }

        // main23
        static fun main23() {
            for(i = 0 to 10) {
                ("i: " + i.toString()).println()
                if (i == 5) {
                    "break".println()
                    break
                }
            }
        }

        // main22
        static fun main22() {
            var i = 0
            var j = ++i
            ("Both should be 1: i: " + i.toString() + ", j: " + j.toString()).println()
        }

        // main21 
        static fun main21() {
            var array: String[] = ["Hello", "World"]
            array[0].println()
            array[1].println()
        }

        // main19
        static fun main19() {
            var l = List.newList<Int>() 
            l.add(1)
            l.add(2)

            "List 1".println()
            each(l, i) {
                ("List item: " + i.toString()).println()
            }

            var first = l.firstOr(3)
            ("first: " + first.toString()).println()

            var l2 = l.filter((i) => {
                ("filter " + i.toString()).println()
                if (i == 1) {
                    return false
                }
                return true
            })

            "List 2".println()
            each(l2, i) {
                ("List item: " + i.toString()).println()
            }

            // Must be able to resolve U from return type
/*
            var l3 = l.map((i) => {
                return i.toString()
            })
            each(l3, i) {
                ("List item: " + i).println()
            }
            */


            "done".println()
        }


        // main18
        static fun main18() {
            var max = Int.maxValue
// compile error:            Int.maxValue = max
            ("max: " + max.toString()).println()
        }

        // main17
        static fun main17() {
            if (!CoreStartup.boolFun()) {
                "boolFun false".println()
            } else {
                "boolFun true".println()
            }
        }

        static fun boolFun(): Bool {
            return CoreStartup.boolValue
        }

        static fun foo<T>(t: T, predicate: (t: T) => Bool) {
            predicate(t)
        }

        // main15
        static fun main15() {
            var tp = new TextParser("Hello World")
            var parsed = tp.parseUntil((c) => {
                if (c == 0x20) {
                    return true
                }
                return false
            })
            ("Parsed " + parsed).println()
        }

        // main16
        static fun main16() {
            var i = 0
            "main".println()
            while(i < 100) {
                i++
                if (i == 20) {
                    "break".println()
                    break
                }
            }
            ("i = " + i.toString()).println()
        }

        // main14
        static fun main14() {
            var c = 'a'
            var i = c.toInt()
            ("Char to int: " + i.toString()).println()
        }

        // main13
        static fun main13() {
            var runnable = new TRun() as Runnable
            var th = new Thread(runnable)
            th.start()
            
            var s = "hello"
            var cr = s.getClassRef()
            ("Getting class name of a string: " + cr.toString()).println()

            var i = 20
            var cri = i.getClassRef()            
            ("Getting class name of an int: " + cri.toString()).println()

            var file = new File("test.txt")
            var crf = file.getClassRef()
            ("Getting class name of a file: " + crf.toString()).println()
            var props = crf.getProperties()
            var pi = 0
            ("prop length: " + props.length().toString()).println()

            while(pi < props.length()) {
                var prop = props[pi]
                if (prop.getName() == "filename") {
                    try {
                        prop.setValue(file, "newfilename")
//                        prop.setValue(file, 1L)
                    } catch(e: Exception) {
//                        "Exception".println()
                        e.printWithStackTrace()
//                        e.toString().println()
                    }                    
                }
                var pcr = prop.getPropertyClassRef()
                if (pcr == null) {
                    "Class ref null".println()
                }
                ("Property: " + prop.getName().toString() + ", class = " + prop.getPropertyClassRef().getClassName()).println()
                pi++
            }

            ("new filename: " + file.filename).println()

            var hm = new HashMap<String, String>()
            var hmcr = hm.getClassRef()
            ("Getting class name of a hash map: " + hmcr.toString()).println()

            var crhm = ClassRef.getClassRef("Am.Collections.HashMap_ta_Am.Lang.String_x_Am.Lang.String")
            if (crhm != null) {
                ("Name of hash map variant class: " + crhm.toString()).println()
            } else {
                "HashMap not found".println()
            }
        }

        // main12
        static fun main12() {
            var sb = new StringBuilder()
            sb.add("hello").add(" ").add("world")
            var str = sb.toString()
            str.println()
        }

        // main10
        static fun main10() {
            var set = new HashSet<Int>()
            var startDate = Date.now()
            var i = 1
            var max = 100000000
            ("Adding " + max.toString() + " key-value pairs to a HashSet on an emulated 020").println()
            while(i <= max) {                
                set.add(i)
                i++
            }

            var endDate = Date.now()

            ("Time: " + (endDate.getValue() - startDate.getValue()).toString() + "ms").println()

            var testVal = 4
            var iset = set as Set<Int>
            var hasValue = iset.has(testVal)

            if (hasValue) {
                "found".println()
            } else {
                "not found".println()
            }
        }

        static fun main11() {
            var set = new HashSet<String>()
            var startDate = Date.now()
            var i = 1
            var max = 10000000
            ("Adding " + max.toString() + " key-value pairs to a HashSet on an emulated 020").println()
            while(i <= max) {                
                var value = i.toString()
                set.add(value)
                i++
            }

            var endDate = Date.now()

            ("Time: " + (endDate.getValue() - startDate.getValue()).toString() + "ms").println()

            var testVal = "4"
            var iset = set as Set<String>
            var hasValue = iset.has(testVal)

            if (hasValue) {
                "found".println()
            } else {
                "not found".println()
            }
            Arc.printAllocatedObjects()
        }       

        static fun main8() {
            var map = new HashMap<String, String>()
            var startDate = Date.now()
            var i = 1
            var max = 10000000
            ("Adding " + max.toString() + " key-value pairs to a HashSet on an emulated 020").println()

            while(i <= max) {                
                var key = i.toString()
                var value = (i + 1).toString()
                map.set(key, value)
                i++
            }
            var endDate = Date.now()

            ("Time: " + (endDate.getValue() - startDate.getValue()).toString() + "ms").println()

            CoreStartup.printValue(map, "213")
            /*
            CoreStartup.printValue(map, "500")
            CoreStartup.printValue(map, "750")
            CoreStartup.printValue(map, "1000")
            */
        }

        static fun printValue(map: HashMap<String, String>, key: String) {
            var s = map.get(key)
            if (s != null) {
                ("Value of key " + key + ", should be " + key + "+1: " + s).println()
            } else {
                "null".println()
            }
        }

        static fun genericTest<T>(t: T): Iterable<T> {
/*
            var list = List<T>.newList<T>()
            t.toString().println()
            u.toString().println()
            return u
            */

/*
            var list = List<T>.newList<T>()            
            var filtered = list.filter((s) => {
                // list needs to casted to Iterator<T>
                // we forward T to filter<T>
                if (s == t) {
                    return false
                }
                return true
            })
            return filtered
            */
            return null
        }

        // main20
        static fun main20() {    
            "String value".println()
//            var u1 = CoreStartup.genericTest("hello")
//            var classRef1 = u1.getClassRef()
//            var className1 = classRef1.getClassName()
//            ("Class name: " + className1).println()
//            ("u1: " + u1.toString()).println()
//            "Int value".println()
//            var u2 = CoreStartup.genericTest<Int>(1)
//            var classRef2 = u2.getClassRef()
//            var className2 = classRef2.getClassName()
//            ("Class name: " + className2).println()
//            ("u2: " + u2.toString()).println()

            var list = List<String>.newList<String>()
            list.add("hello")
            list.add("world")
/*
            each(list, i) {
                i.println()
                if (i == "world") {
                    "break".println()
                    break
                }
            }
            */

            /* TODO: Make this work
            var filtered = list.filter((s) => {
                if (s == "world") {
                    ("Filtering: " + s).println()
                    return true
                }
                ("Not Filtering: " + s).println()
                return false
            })

            each(filtered, i) {
                ("Filtered: " + i).println()
            }
            */

/*
            var x: (s: String) => Bool = (s) => {
                if (s == "world") {
                    return false
                }
                return true
            }
            var b = x("hello")
            */

            "end".println()
        }

        // TreeSet example with lambda comparison functions
        static fun main28() {
            "=== TreeSet<T> Examples ===".println()
            
            // Example 1: Basic integer sorting (ascending)
            "1. Integer TreeSet (ascending order)".println()
            var treeSet = new TreeSet<Int>((a, b) => {
                if (a < b) {
                    return -1
                } else if (a > b) {
                    return 1
                } else {
                    return 0
                }
            })
            
            // Add some numbers in random order
            treeSet.add(5)
            treeSet.add(2)
            treeSet.add(8)
            treeSet.add(1)
            treeSet.add(9)
            treeSet.add(3)
            treeSet.add(2)  // Duplicate - should not be added
            
            ("TreeSet size: " + treeSet.getSize().toString()).println()
            
            // Check if elements exist
            ("Contains 5: " + treeSet.has(5).toString()).println()
            ("Contains 10: " + treeSet.has(10).toString()).println()
            
            // Get sorted list
            var sortedList = treeSet.toList()
            "Sorted elements: ".println()

            for (i = 0 to sortedList.getSize()) {
                sortedList.get(i).toString().println()
            }
            
            // Example 2: Reverse order (descending)
            "".println()
            "2. Integer TreeSet (descending order)".println()
            var reverseTreeSet = new TreeSet<Int>((a, b) => {
                if (a > b) {
                    return -1
                } else if (a < b) {
                    return 1
                } else {
                    return 0
                }
            })
            
            reverseTreeSet.add(5)
            reverseTreeSet.add(2)
            reverseTreeSet.add(8)
            reverseTreeSet.add(1)
            reverseTreeSet.add(9)
            reverseTreeSet.add(3)
            
            var reverseSortedList = reverseTreeSet.toList()
            "Reverse sorted elements: ".println()
            var j = 0
            while (j < reverseSortedList.getSize()) {
                reverseSortedList.get(j).toString().println()
                j++
            }
            
            // Example 3: String sorting (reverse alphabetical order)
            "".println()
            "3. String TreeSet (reverse alphabetical order)".println()
            var stringTreeSet = new TreeSet<String>((a, b) => {
                // Basic string comparison - compare character by character
                var lenA = a.getLength()
                var lenB = b.getLength()
                var minLen = lenA
                if (lenB < lenA) {
                    minLen = lenB
                }

                for (i = 0 to minLen) {
                    var charA = a.characterAt(i.toUInt())
                    var charB = b.characterAt(i.toUInt())
                    if (charA < charB) {
                        return 1  // Reverse order: return positive if a < b
                    } else if (charA > charB) {
                        return -1  // Reverse order: return negative if a > b
                    }
                }
                
                // If all compared characters are equal, compare lengths (reverse order)
                if (lenA < lenB) {
                    return 1
                } else if (lenA > lenB) {
                    return -1
                } else {
                    return 0
                }
            })
            
            stringTreeSet.add("apple")
            stringTreeSet.add("banana")
            stringTreeSet.add("cherry")
            stringTreeSet.add("date")
            stringTreeSet.add("apple")  // Duplicate - should not be added
            
            ("String TreeSet size: " + stringTreeSet.getSize().toString()).println()
            
            var sortedStrings = stringTreeSet.toList()
            "Reverse alphabetical order: ".println()
            for (k = 0 to sortedStrings.getSize()) {
                sortedStrings.get(k).println()
            }
            
            // Example 4: Test remove functionality
            "".println()
            "4. Testing remove functionality".println()
            var testSet = new TreeSet<Int>((a, b) => {
                if (a < b) {
                    return -1
                } else if (a > b) {
                    return 1
                } else {
                    return 0
                }
            })
            testSet.add(10)
            testSet.add(5)
            testSet.add(15)
            testSet.add(3)
            testSet.add(7)
            
            ("Before remove: size = " + testSet.getSize().toString()).println()
            var beforeList = testSet.toList()
            for (l = 0 to beforeList.getSize()) {
                beforeList.get(l).toString().println()
            }
            
            testSet.remove(5)
            ("After removing 5: size = " + testSet.getSize().toString()).println()
            var afterList = testSet.toList()
            for (m = 0 to afterList.getSize()) {
                afterList.get(m).toString().println()
            }
            
            "=== TreeSet Examples Complete ===".println()
        }

    }

}