namespace Am.Examples {    
    struct MyStruct {
        import Am.Lang
        var x: Int
    }
    
    class CoreStartup {
        import Am.Lang
        import Am.Lang.Diagnostics
        import Am.IO
        import Am.IO.Networking
        import Am.Collections

        static fun main() {
            var s = "hello"
            var cr = s.getClassRef()
            ("Getting class name of a string: " + cr.toString()).println()

            var i = 20
            var cri = i.getClassRef()            
            ("Getting class name of an int: " + cri.toString()).println()

            var file = new File("test.txt")
            var crf = file.getClassRef()
            ("Getting class name of a file: " + crf.toString()).println()
            var props = crf.getProperties()
            var pi = 0
            /*
            while(pi < props.length()) {
                var prop = props[pi]
                ("Property: " + prop.name.toString()).println()
                pi++
            }
            */
        }

        // main12
        static fun main12() {
            var sb = new StringBuilder()
            sb.add("hello").add(" ").add("world")
            var str = sb.toString()
            str.println()
        }

        // main10
        static fun main10() {
            var set = new HashSet2<Int>()
            var startDate = Date.now()
            var i = 1
            var max = 1000000
            ("Adding " + max.toString() + " key-value pairs to a HashSet on an emulated 020").println()
            while(i <= max) {                
                set.add(i)
                i++
            }

            var endDate = Date.now()

            ("Time: " + (endDate.getValue() - startDate.getValue()).toString() + "ms").println()

            var testVal = 4
            var iset = set as Set<Int>
            var hasValue = iset.has(testVal)

            if (hasValue) {
                "found".println()
            } else {
                "not found".println()
            }
        }

        static fun main11() {
            var set = new HashSet2<String>()
            var startDate = Date.now()
            var i = 1
            var max = 10000000
            ("Adding " + max.toString() + " key-value pairs to a HashSet on an emulated 020").println()
            while(i <= max) {                
                var value = i.toString()
                set.add(value)
                i++
            }

            var endDate = Date.now()

            ("Time: " + (endDate.getValue() - startDate.getValue()).toString() + "ms").println()

            var testVal = "4"
            var iset = set as Set<String>
            var hasValue = iset.has(testVal)

            if (hasValue) {
                "found".println()
            } else {
                "not found".println()
            }
            Arc.printAllocatedObjects()
        }       

        static fun main8() {
            var map = new HashMap<String, String>()
            var startDate = Date.now()
            var i = 1
            var max = 10000000
            ("Adding " + max.toString() + " key-value pairs to a HashSet on an emulated 020").println()

            while(i <= max) {                
                var key = i.toString()
                var value = (i + 1).toString()
                map.set(key, value)
                i++
            }
            var endDate = Date.now()

            ("Time: " + (endDate.getValue() - startDate.getValue()).toString() + "ms").println()

            CoreStartup.printValue(map, "213")
            /*
            CoreStartup.printValue(map, "500")
            CoreStartup.printValue(map, "750")
            CoreStartup.printValue(map, "1000")
            */
        }

        static fun printValue(map: HashMap<String, String>, key: String) {
            var s = map.get(key)
            if (s != null) {
                ("Value of key " + key + ", should be " + key + "+1: " + s).println()
            } else {
                "null".println()
            }
        }

        static fun main3() {
            var list = List<String>.newList<String>()
            list.add("hello")
            list.add("world")
            each(list, i) {
                i.println()
            }
        }

        static fun main2() {
            "connect to localhost".println()
            var s = Socket.create(AddressFamily.inet, SocketType.stream, ProtocolFamily.unspecified)
            s.connect("localhost", 9030)
            "connected".println()

            var socketStream = new SocketStream(s)
            var istream = socketStream as Stream
            var ts = new TextStream(istream)
            ts.writeString("GET / HTTP/1.1\r\nHost:localhost\r\n\r\n")

            var rs = ts.readString()
            rs.println()        
            s.close()    
        }
/*
        static fun main6() {
            var host = "www.kelson.no"
            ("connect to " + host).println()
            var s = Socket.create(AddressFamily.inet, SocketType.stream, ProtocolFamily.unspecified)
            s.connect(host, 443)
            "connected".println()

            var sslCert = SslCert.load("cacert.pem")

            var socketStream = new SslSocketStream(s, host, sslCert)
            var istream = socketStream as Stream
            var ts = new TextStream(istream)
            ts.writeString("GET / HTTP/1.1\r\nHost: " + host + "\r\n\r\n")

            var rs = ts.readString()
            "data read".println()
            rs.println()        
            s.close()    
            "closed".println()
        }
*/

    }
}